"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setVersion = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@jnxplus/common");
const devkit_1 = require("@nx/devkit");
const child_process_1 = require("child_process");
const fs = require("fs");
const path = require("path");
function runExecutor(options, context) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        console.log('Executor ran for SetVersion', options);
        const projectRoot = (0, common_1.getProjectRoot)(context);
        //change file
        updateFile(options.version, projectRoot);
        const commitMessage = `release: write version ${options.version} in gradle.build`;
        const commit = `git commit --no-verify -m "${commitMessage}" packages/gradle-plugin/build.gradle`;
        (0, child_process_1.execSync)(commit, {
            cwd: devkit_1.workspaceRoot,
            stdio: 'inherit',
            env: process.env,
            encoding: 'utf-8',
        });
        const push = `git push`;
        (0, child_process_1.execSync)(push, {
            cwd: devkit_1.workspaceRoot,
            stdio: 'inherit',
            env: process.env,
            encoding: 'utf-8',
        });
        return { success: true };
    });
}
exports.default = runExecutor;
function updateFile(newVersion, projectRoot) {
    const buildGradlePath = path.join(projectRoot, 'build.gradle');
    const buildGradleContent = fs.readFileSync(buildGradlePath, 'utf-8');
    const newContent = setVersion(buildGradleContent, newVersion);
    fs.writeFileSync(buildGradlePath, newContent);
}
function setVersion(buildGradleContent, newVersion) {
    return buildGradleContent.replace(/(version\s=\s')(.*)(')/, `$1${newVersion}$3`);
}
exports.setVersion = setVersion;
//# sourceMappingURL=executor.js.map