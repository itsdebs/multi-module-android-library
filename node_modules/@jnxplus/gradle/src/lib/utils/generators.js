"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addOrUpdatePrettierIgnore = exports.updateGitIgnore = exports.addLibraryToProjects = exports.addProjectToGradleSetting = exports.addOrUpdateGitattributes = exports.getDsl = void 0;
const devkit_1 = require("@nx/devkit");
const path_1 = require("path");
const _1 = require(".");
function getDsl(tree) {
    const filePath = 'settings.gradle';
    if (tree.exists(filePath)) {
        return 'groovy';
    }
    return 'kotlin';
}
exports.getDsl = getDsl;
function addOrUpdateGitattributes(tree) {
    const gitattributesPath = `.gitattributes`;
    const gradleWrapperGitattributes = `#\n# https://help.github.com/articles/dealing-with-line-endings/\n#\n# Linux start script should use lf\ngradlew text eol=lf\n# Windows script files should use crlf\n*.bat text eol=crlf`;
    if (tree.exists(gitattributesPath)) {
        const gitattributesOldContent = tree.read(gitattributesPath, 'utf-8') || '';
        const gitattributesContent = gitattributesOldContent.concat('\n', gradleWrapperGitattributes);
        tree.write(gitattributesPath, gitattributesContent);
    }
    else {
        tree.write(gitattributesPath, gradleWrapperGitattributes);
    }
}
exports.addOrUpdateGitattributes = addOrUpdateGitattributes;
function addProjectToGradleSetting(tree, options) {
    const filePath = 'settings.gradle';
    const ktsFilePath = 'settings.gradle.kts';
    const regex = /.*rootProject\.name.*/;
    const projectPath = (0, _1.getProjectPathFromProjectRoot)(options.projectRoot);
    if (tree.exists(filePath)) {
        const settingsContent = tree.read(filePath, 'utf-8') || '';
        const newSettingsContent = settingsContent.replace(regex, `$&\ninclude('${projectPath}')`);
        tree.write(filePath, newSettingsContent);
    }
    if (tree.exists(ktsFilePath)) {
        const settingsContent = tree.read(ktsFilePath, 'utf-8') || '';
        const newSettingsContent = settingsContent.replace(regex, `$&\ninclude("${projectPath}")`);
        tree.write(ktsFilePath, newSettingsContent);
    }
}
exports.addProjectToGradleSetting = addProjectToGradleSetting;
function addLibraryToProjects(tree, options) {
    const regex = /dependencies\s*{/;
    const projectPath = (0, _1.getProjectPathFromProjectRoot)(options.projectRoot);
    for (const projectName of options.parsedProjects) {
        const projectRoot = (0, devkit_1.readProjectConfiguration)(tree, projectName).root;
        const filePath = (0, path_1.join)(projectRoot, `build.gradle`);
        const ktsPath = (0, path_1.join)(projectRoot, `build.gradle.kts`);
        if (tree.exists(filePath)) {
            const buildGradleContent = tree.read(filePath, 'utf-8') || '';
            const newBuildGradleContent = buildGradleContent.replace(regex, `$&\n\timplementation project(':${projectPath}')`);
            tree.write(filePath, newBuildGradleContent);
        }
        if (tree.exists(ktsPath)) {
            const buildGradleContent = tree.read(ktsPath, 'utf-8') || '';
            const newBuildGradleContent = buildGradleContent.replace(regex, `$&\n\timplementation(project(":${projectPath}"))`);
            tree.write(ktsPath, newBuildGradleContent);
        }
    }
}
exports.addLibraryToProjects = addLibraryToProjects;
function updateGitIgnore(tree) {
    const filePath = `.gitignore`;
    const contents = tree.read(filePath, 'utf-8') || '';
    const gradleIgnore = '\n# Gradle\n.gradle\nbuild';
    const newContents = contents.concat(gradleIgnore);
    tree.write(filePath, newContents);
}
exports.updateGitIgnore = updateGitIgnore;
function addOrUpdatePrettierIgnore(tree) {
    const prettierIgnorePath = `.prettierignore`;
    const gradlePrettierIgnore = '# Gradle build\nbuild';
    if (tree.exists(prettierIgnorePath)) {
        const prettierIgnoreOldContent = tree.read(prettierIgnorePath, 'utf-8') || '';
        const prettierIgnoreContent = prettierIgnoreOldContent.concat('\n', gradlePrettierIgnore);
        tree.write(prettierIgnorePath, prettierIgnoreContent);
    }
    else {
        tree.write(prettierIgnorePath, gradlePrettierIgnore);
    }
}
exports.addOrUpdatePrettierIgnore = addOrUpdatePrettierIgnore;
//# sourceMappingURL=generators.js.map