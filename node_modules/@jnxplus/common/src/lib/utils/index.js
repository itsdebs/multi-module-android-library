"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPluginName = exports.getProjectGraphNodeType = exports.isE2eTest = exports.getCheckstylePath = exports.getKtlintPath = exports.downloadFile = exports.normalizeName = exports.getProjectSourceRoot = exports.getProjectType = exports.isRootProject = exports.getProjectRoot = exports.getProject = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const axios_1 = require("axios");
const fs = require("fs");
const path = require("path");
const stream = require("stream");
const util_1 = require("util");
const configuration_1 = require("nx/src/config/configuration");
const child_process_1 = require("child_process");
function getProject(context) {
    var _a;
    if (!context.projectName) {
        throw new Error('No project name found in context');
    }
    const project = (_a = context === null || context === void 0 ? void 0 : context.projectsConfigurations) === null || _a === void 0 ? void 0 : _a.projects[context.projectName];
    if (!project) {
        throw new Error(`No project found in project graph for ${context.projectName}`);
    }
    return project;
}
exports.getProject = getProject;
function getProjectRoot(context) {
    const project = getProject(context);
    return project.root;
}
exports.getProjectRoot = getProjectRoot;
function isRootProject(context) {
    const projectRoot = getProjectRoot(context);
    return !projectRoot;
}
exports.isRootProject = isRootProject;
function getProjectType(context) {
    const project = getProject(context);
    return project.projectType;
}
exports.getProjectType = getProjectType;
function getProjectSourceRoot(context) {
    const project = getProject(context);
    return project.sourceRoot;
}
exports.getProjectSourceRoot = getProjectSourceRoot;
function normalizeName(name) {
    return name.replace(/[^0-9a-zA-Z]/g, '-');
}
exports.normalizeName = normalizeName;
const finished = (0, util_1.promisify)(stream.finished);
function downloadFile(fileUrl, outputLocationPath
// eslint-disable-next-line  @typescript-eslint/no-explicit-any
) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const writer = fs.createWriteStream(outputLocationPath);
        return (0, axios_1.default)({
            method: 'get',
            url: fileUrl,
            responseType: 'stream',
        }).then((response) => {
            response.data.pipe(writer);
            return finished(writer); //this is a Promise
        });
    });
}
exports.downloadFile = downloadFile;
function getKtlintPath(getKtlintVersion, dir = devkit_1.workspaceRoot) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const version = getKtlintVersion(dir);
        const downloadUrl = `https://github.com/pinterest/ktlint/releases/download/${version}/ktlint`;
        let outputDirectory;
        const nxJson = (0, configuration_1.readNxJson)();
        if (nxJson.installation) {
            outputDirectory = path.join(dir, '.nx', 'installation', 'node_modules', '@jnxplus', 'tools', 'linters', 'ktlint');
        }
        else {
            outputDirectory = path.join(dir, 'node_modules', '@jnxplus', 'tools', 'linters', 'ktlint');
        }
        if (!fs.existsSync(outputDirectory)) {
            fs.mkdirSync(outputDirectory, { recursive: true });
        }
        const ktlintAbsolutePath = path.join(outputDirectory, 'ktlint');
        if (!fs.existsSync(ktlintAbsolutePath)) {
            yield downloadFile(downloadUrl, ktlintAbsolutePath);
        }
        else if (isAnotherVersion(ktlintAbsolutePath, version)) {
            fs.unlinkSync(ktlintAbsolutePath);
            yield downloadFile(downloadUrl, ktlintAbsolutePath);
        }
        return ktlintAbsolutePath;
    });
}
exports.getKtlintPath = getKtlintPath;
function isAnotherVersion(ktlintAbsolutePath, version) {
    const jarVersion = (0, child_process_1.execSync)(`java -jar ${ktlintAbsolutePath} --version`)
        .toString()
        .trim();
    return jarVersion !== version;
}
function getCheckstylePath(getCheckstyleVersion, dir = devkit_1.workspaceRoot) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const version = getCheckstyleVersion(dir);
        const checkstyleJarName = `checkstyle-${version}-all.jar`;
        const downloadUrl = `https://github.com/checkstyle/checkstyle/releases/download/checkstyle-${version}/${checkstyleJarName}`;
        let outputDirectory;
        const nxJson = (0, configuration_1.readNxJson)();
        if (nxJson.installation) {
            outputDirectory = path.join(dir, '.nx', 'installation', 'node_modules', '@jnxplus', 'tools', 'linters', 'checkstyle');
        }
        else {
            outputDirectory = path.join(dir, 'node_modules', '@jnxplus', 'tools', 'linters', 'checkstyle');
        }
        if (!fs.existsSync(outputDirectory)) {
            fs.mkdirSync(outputDirectory, { recursive: true });
        }
        const checkstyleJarAbsolutePath = path.join(outputDirectory, checkstyleJarName);
        if (!fs.existsSync(checkstyleJarAbsolutePath)) {
            yield downloadFile(downloadUrl, checkstyleJarAbsolutePath);
        }
        return checkstyleJarAbsolutePath;
    });
}
exports.getCheckstylePath = getCheckstylePath;
function isE2eTest(tmpWorkspaceRoot) {
    return (fs.existsSync(tmpWorkspaceRoot) && isSubdir(tmpWorkspaceRoot, process.cwd()));
}
exports.isE2eTest = isE2eTest;
function isSubdir(parentPath, childPath) {
    const relative = path.relative(parentPath, childPath);
    const isSubdir = relative && !relative.startsWith('..') && !path.isAbsolute(relative);
    return isSubdir;
}
function isSameDir(path1, path2) {
    const relative = path.relative(path1, path2);
    return !relative;
}
function getProjectGraphNodeType(projectRoot) {
    if (!projectRoot) {
        return 'lib';
    }
    const layout = (0, configuration_1.workspaceLayout)();
    if (projectRoot.startsWith(layout.appsDir)) {
        return 'app';
    }
    return 'lib';
}
exports.getProjectGraphNodeType = getProjectGraphNodeType;
function getPluginName(context) {
    var _a, _b;
    return (_b = (_a = context.target) === null || _a === void 0 ? void 0 : _a.executor) === null || _b === void 0 ? void 0 : _b.split(':')[0];
}
exports.getPluginName = getPluginName;
//# sourceMappingURL=index.js.map