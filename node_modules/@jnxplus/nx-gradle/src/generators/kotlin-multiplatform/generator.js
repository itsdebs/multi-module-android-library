"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const common_1 = require("@jnxplus/common");
const gradle_1 = require("@jnxplus/gradle");
const devkit_1 = require("@nx/devkit");
const fs = require("fs");
const fileutils_1 = require("nx/src/utils/fileutils");
const path = require("path");
function normalizeOptions(tree, options) {
    const prefix = (0, devkit_1.names)((0, common_1.normalizeName)(options.name)).fileName;
    let androidAppName;
    let iosAppName;
    let desktopAppName;
    let sharedLibName;
    if (options.simpleName || !options.directory) {
        androidAppName = `${prefix}-android`;
        iosAppName = `${prefix}-ios`;
        desktopAppName = `${prefix}-desktop`;
        sharedLibName = `${prefix}-shared`;
    }
    else {
        androidAppName = `${(0, common_1.normalizeName)((0, devkit_1.names)(options.directory).fileName)}-${prefix}-android`;
        iosAppName = `${(0, common_1.normalizeName)((0, devkit_1.names)(options.directory).fileName)}-${prefix}-ios`;
        desktopAppName = `${(0, common_1.normalizeName)((0, devkit_1.names)(options.directory).fileName)}-${prefix}-desktop`;
        sharedLibName = `${(0, common_1.normalizeName)((0, devkit_1.names)(options.directory).fileName)}-${prefix}-shared`;
    }
    const appsDir = (0, devkit_1.getWorkspaceLayout)(tree).appsDir;
    const libsDir = (0, devkit_1.getWorkspaceLayout)(tree).libsDir;
    const androidAppDirectory = options.directory
        ? `${(0, devkit_1.names)(options.directory).fileName}/${androidAppName}`
        : `${androidAppName}`;
    const androidAppRoot = `${appsDir}/${androidAppDirectory}`;
    const iosAppDirectory = options.directory
        ? `${(0, devkit_1.names)(options.directory).fileName}/${iosAppName}`
        : `${iosAppName}`;
    const iosAppRoot = `${appsDir}/${iosAppDirectory}`;
    const desktopAppDirectory = options.directory
        ? `${(0, devkit_1.names)(options.directory).fileName}/${desktopAppName}`
        : `${desktopAppName}`;
    const desktopAppRoot = `${appsDir}/${desktopAppDirectory}`;
    const sharedLibDirectory = options.directory
        ? `${(0, devkit_1.names)(options.directory).fileName}/${sharedLibName}`
        : `${sharedLibName}`;
    const sharedLibRoot = `${libsDir}/${sharedLibDirectory}`;
    const sharedLibProjectPath = `:${(0, gradle_1.getProjectPathFromProjectRoot)(sharedLibRoot)}`;
    const settingsGradleKtsPath = path.join(devkit_1.workspaceRoot, 'settings.gradle.kts');
    const isSettingsGradleKtsExists = (0, fileutils_1.fileExists)(settingsGradleKtsPath);
    let rootProjectName = '';
    if (isSettingsGradleKtsExists) {
        const settingsGradleKtsContent = fs.readFileSync(settingsGradleKtsPath, 'utf-8');
        rootProjectName = (0, gradle_1.getRootProjectName)(settingsGradleKtsContent);
    }
    const parsedTags = options.tags
        ? options.tags.split(',').map((s) => s.trim())
        : [];
    let packageName;
    if (options.simplePackageName || !options.directory) {
        packageName = `${options.groupId}.${(0, devkit_1.names)(prefix).className.toLocaleLowerCase()}`.replace(new RegExp(/-/, 'g'), '');
    }
    else {
        packageName = `${options.groupId}.${`${(0, devkit_1.names)(options.directory).fileName.replace(new RegExp(/\//, 'g'), '.')}.${(0, devkit_1.names)(prefix).className.toLocaleLowerCase()}`}`.replace(new RegExp(/-/, 'g'), '');
    }
    const packageDirectory = packageName.replace(new RegExp(/\./, 'g'), '/');
    const relativePathToSharedLib = path
        .relative(path.join(devkit_1.workspaceRoot, iosAppRoot), path.join(devkit_1.workspaceRoot, sharedLibRoot))
        .replace(new RegExp(/\\/, 'g'), '/');
    const relativePathToPodfile = path
        .relative(path.join(devkit_1.workspaceRoot, sharedLibRoot), path.join(devkit_1.workspaceRoot, iosAppRoot))
        .replace(new RegExp(/\\/, 'g'), '/');
    const appName = (0, devkit_1.names)(prefix).className;
    return Object.assign(Object.assign({}, options), { androidAppName,
        iosAppName,
        desktopAppName,
        sharedLibName,
        androidAppRoot,
        iosAppRoot,
        desktopAppRoot,
        sharedLibRoot,
        androidAppDirectory,
        iosAppDirectory,
        desktopAppDirectory,
        sharedLibDirectory,
        sharedLibProjectPath,
        rootProjectName,
        parsedTags,
        packageName,
        packageDirectory,
        relativePathToSharedLib,
        relativePathToPodfile,
        appName });
}
function addAndroidFiles(tree, options) {
    const templateOptions = Object.assign(Object.assign({}, options), { offsetFromRoot: (0, devkit_1.offsetFromRoot)(tree.root), template: '' });
    (0, devkit_1.generateFiles)(tree, path.join(__dirname, 'files', 'android-app'), options.androidAppRoot, templateOptions);
}
function addIosFiles(tree, options) {
    const templateOptions = Object.assign(Object.assign({}, options), { offsetFromRoot: (0, devkit_1.offsetFromRoot)(tree.root), template: '' });
    (0, devkit_1.generateFiles)(tree, path.join(__dirname, 'files', 'ios-app'), options.iosAppRoot, templateOptions);
}
function addDesktopFiles(tree, options) {
    const templateOptions = Object.assign(Object.assign({}, options), { offsetFromRoot: (0, devkit_1.offsetFromRoot)(tree.root), template: '' });
    (0, devkit_1.generateFiles)(tree, path.join(__dirname, 'files', 'desktop-app'), options.desktopAppRoot, templateOptions);
}
function addSharedFiles(tree, options) {
    const templateOptions = Object.assign(Object.assign({}, options), { offsetFromRoot: (0, devkit_1.offsetFromRoot)(tree.root), template: '' });
    (0, devkit_1.generateFiles)(tree, path.join(__dirname, 'files', 'shared-lib'), options.sharedLibRoot, templateOptions);
}
function generateAndroidApp(normalizedOptions, tree) {
    const projectConfiguration = {
        root: normalizedOptions.androidAppRoot,
        projectType: 'application',
        sourceRoot: `${normalizedOptions.androidAppRoot}/src`,
        targets: {
            build: {
                executor: `@jnxplus/nx-gradle:build`,
                outputs: [`${normalizedOptions.androidAppRoot}/build`],
            },
            serve: {},
            lint: {
                executor: `@jnxplus/nx-gradle:lint`,
                options: {
                    linter: 'ktlint',
                },
            },
            test: {
                executor: `@jnxplus/nx-gradle:test`,
            },
            ktformat: {
                executor: `@jnxplus/nx-gradle:ktformat`,
            },
        },
        tags: normalizedOptions.parsedTags,
    };
    (0, devkit_1.addProjectConfiguration)(tree, normalizedOptions.androidAppName, projectConfiguration);
    addAndroidFiles(tree, normalizedOptions);
    (0, gradle_1.addProjectToGradleSetting)(tree, {
        projectRoot: normalizedOptions.androidAppRoot,
    });
}
function generateIosApp(normalizedOptions, tree) {
    const projectConfiguration = {
        root: normalizedOptions.iosAppRoot,
        projectType: 'application',
        sourceRoot: `${normalizedOptions.iosAppRoot}/src`,
        targets: {},
        tags: normalizedOptions.parsedTags,
        implicitDependencies: [
            normalizedOptions.sharedLibName,
            //TODO normalizedOptions.rootProjectName,
        ],
    };
    (0, devkit_1.addProjectConfiguration)(tree, normalizedOptions.iosAppName, projectConfiguration);
    addIosFiles(tree, normalizedOptions);
}
function generateDesktopApp(normalizedOptions, tree) {
    const projectConfiguration = {
        root: normalizedOptions.desktopAppRoot,
        projectType: 'application',
        sourceRoot: `${normalizedOptions.desktopAppRoot}/src`,
        targets: {
            build: {
                executor: `@jnxplus/nx-gradle:build`,
                outputs: [`${normalizedOptions.desktopAppRoot}/build`],
            },
            serve: {
                executor: `@jnxplus/nx-gradle:run-task`,
                options: {
                    task: 'run',
                    keepItRunning: true,
                },
            },
            lint: {
                executor: `@jnxplus/nx-gradle:lint`,
                options: {
                    linter: 'ktlint',
                },
            },
            test: {
                executor: `@jnxplus/nx-gradle:test`,
            },
            ktformat: {
                executor: `@jnxplus/nx-gradle:ktformat`,
            },
        },
        tags: normalizedOptions.parsedTags,
    };
    (0, devkit_1.addProjectConfiguration)(tree, normalizedOptions.desktopAppName, projectConfiguration);
    addDesktopFiles(tree, normalizedOptions);
    (0, gradle_1.addProjectToGradleSetting)(tree, {
        projectRoot: normalizedOptions.desktopAppRoot,
    });
}
function generateSharedLib(normalizedOptions, tree) {
    const projectConfiguration = {
        root: normalizedOptions.sharedLibRoot,
        projectType: 'library',
        sourceRoot: `${normalizedOptions.sharedLibRoot}/src`,
        targets: {
            build: {
                executor: `@jnxplus/nx-gradle:build`,
                outputs: [`${normalizedOptions.sharedLibRoot}/build`],
            },
            lint: {
                executor: `@jnxplus/nx-gradle:lint`,
                options: {
                    linter: 'ktlint',
                },
            },
            test: {
                executor: `@jnxplus/nx-gradle:test`,
            },
            ktformat: {
                executor: `@jnxplus/nx-gradle:ktformat`,
            },
        },
        tags: normalizedOptions.parsedTags,
    };
    (0, devkit_1.addProjectConfiguration)(tree, normalizedOptions.sharedLibName, projectConfiguration);
    addSharedFiles(tree, normalizedOptions);
    (0, gradle_1.addProjectToGradleSetting)(tree, {
        projectRoot: normalizedOptions.sharedLibRoot,
    });
}
function default_1(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const normalizedOptions = normalizeOptions(tree, options);
        generateSharedLib(normalizedOptions, tree);
        generateDesktopApp(normalizedOptions, tree);
        generateIosApp(normalizedOptions, tree);
        generateAndroidApp(normalizedOptions, tree);
        yield (0, devkit_1.formatFiles)(tree);
    });
}
exports.default = default_1;
//# sourceMappingURL=generator.js.map