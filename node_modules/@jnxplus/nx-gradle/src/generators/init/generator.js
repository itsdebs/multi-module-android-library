"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const common_1 = require("@jnxplus/common");
const gradle_1 = require("@jnxplus/gradle");
const devkit_1 = require("@nx/devkit");
const path = require("path");
function normalizeOptions(tree, options) {
    const kotlinExtension = options.dsl === 'kotlin' || options.preset === 'kotlin-multiplatform'
        ? '.kts'
        : '';
    const generateRepositories = process.env['NODE_ENV'] === 'test';
    return Object.assign(Object.assign({}, options), { kotlinExtension,
        springBootVersion: common_1.springBootVersion,
        springDependencyManagementVersion: common_1.springDependencyManagementVersion,
        quarkusVersion: common_1.quarkusVersion,
        micronautVersion: common_1.micronautVersion,
        kspVersion: common_1.kspVersion,
        shadowVersion: common_1.shadowVersion,
        kotlinVersion: common_1.kotlinVersion,
        checkstyleVersion: common_1.checkstyleVersion,
        ktlintVersion: common_1.ktlintVersion,
        jnxplusGradlePluginVersion: common_1.jnxplusGradlePluginVersion,
        generateRepositories });
}
function addFiles(tree, options) {
    const templateOptions = Object.assign(Object.assign({}, options), { offsetFromRoot: (0, devkit_1.offsetFromRoot)(tree.root), template: '' });
    (0, devkit_1.generateFiles)(tree, path.join(__dirname, 'files', 'gradle', 'wrapper'), '', templateOptions);
    (0, devkit_1.generateFiles)(tree, path.join(__dirname, 'files', 'gradle', 'config', options.preset), '', templateOptions);
    (0, devkit_1.generateFiles)(tree, path.join(__dirname, 'files', 'linters'), 'tools/linters', templateOptions);
}
function default_1(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const normalizedOptions = normalizeOptions(tree, options);
        addFiles(tree, normalizedOptions);
        (0, common_1.updateNxJson)(tree, '@jnxplus/nx-gradle');
        (0, gradle_1.updateGitIgnore)(tree);
        (0, gradle_1.addOrUpdatePrettierIgnore)(tree);
        (0, gradle_1.addOrUpdateGitattributes)(tree);
        tree.changePermissions('gradlew', '755');
        tree.changePermissions('gradlew.bat', '755');
        yield (0, devkit_1.formatFiles)(tree);
    });
}
exports.default = default_1;
//# sourceMappingURL=generator.js.map