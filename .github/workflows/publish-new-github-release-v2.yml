name: Publish new github release for v2

on:
  workflow_dispatch:
    inputs:
      module@version:
        required: true
        description: Choose module to draft release from
  pull_request:
    branches: [ 'master' ]
    types:
      - closed

permissions:
  contents: write
  pull-requests: write
jobs:
  github-release-v2:
    name: Publish new release for v2
    runs-on: ubuntu-latest
#    if: startsWith(github.ref, 'refs/heads/main') || ((startsWith(github.event.pull_request.head.ref, 'release/')  || startsWith(github.event.pull_request.head.ref, 'hotfix-release/')) && github.event.pull_request.merged == true) # only merged pull requests must trigger this job
    steps:
      - name: Extract version from branch name
        id: extract-version
        run: |
          VERSION=${module@version:=$VERSION}
          echo "release_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Get module name
        id: get-module
        run: |
          module_name=$(echo ${{ steps.extract-version.outputs.release_version }} | cut -d'@' -f1)
          echo "::set-output name=module_name::$module_name"

      - name: Initialize mandatory git config
        run: |
          git config user.name "GitHub actions"
          git config user.email noreply@github.com

      - name: Create Monorepo Release Tag
        id: create_monorepo_release
        run: |
          git tag -a v${{ steps.extract-version.outputs.release_version }} -m "chore: release v${{ steps.extract-version.outputs.release_version }}"
          git push origin refs/tags/v${{ steps.extract-version.outputs.release_version }}

      - name: Get the two latest versions
        run: |
          CURRENT_VERSION=$(git tag -l "v*" --sort=-version:refname | head -n 1)
          LAST_VERSION=$(git tag -l "v*" --sort=-version:refname | head -n 2 | awk 'NR == 2 { print $1 }')

          echo "Current version: $CURRENT_VERSION"
          echo "Previous version: $LAST_VERSION"

          echo "current_version=$(echo $CURRENT_VERSION)" >> $GITHUB_ENV
          echo "last_version=$(echo $LAST_VERSION)" >> $GITHUB_ENV
          echo "DATE=$(date)" >> $GITHUB_ENV

      - name: Create GitHub Releases
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run release:github -- --base=$last_version --head=$current_version

      - name: Create pull request into develop
        uses: repo-sync/pull-request@v2
        if: (startsWith(github.event.pull_request.head.ref, 'release-v2/') || startsWith(github.event.pull_request.head.ref, 'hotfix-release-v2/'))
        with:
          source_branch: 'main'
          destination_branch: 'develop'
          github_token: ${{ secrets.PAT }}
          pr_title: "chore(release): pulling master-v2 into develop-v2 post release v${{ steps.extract-version.outputs.release_version }}"
          pr_body: ':crown: *An automated PR*'
          pr_reviewer: 'itsdebs'

      - name: Delete hotfix release branch
        uses: koj-co/delete-merged-action@master
        if: startsWith(github.event.pull_request.head.ref, 'hotfix-release-v2/')
        with:
          branches: 'hotfix-release*'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete release branch
        uses: koj-co/delete-merged-action@master
        if: startsWith(github.event.pull_request.head.ref, 'release-v2/')
        with:
          branches: 'release/*'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
