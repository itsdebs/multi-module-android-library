"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRootProjectName = exports.getCheckstyleVersion = exports.getKtlintVersion = exports.getQuarkusVersion = exports.getProjectRootFromProjectPath = exports.getProjectPathFromProjectRoot = exports.getProjectPath = exports.getExecutable = void 0;
const common_1 = require("@jnxplus/common");
const fs = require("fs");
const path = require("path");
function getExecutable() {
    const isWin = process.platform === 'win32';
    return isWin ? 'gradlew.bat' : './gradlew';
}
exports.getExecutable = getExecutable;
function getProjectPath(context) {
    const projectRoot = (0, common_1.getProjectRoot)(context);
    return `:${getProjectPathFromProjectRoot(projectRoot)}`;
}
exports.getProjectPath = getProjectPath;
function getProjectPathFromProjectRoot(projectRoot) {
    return projectRoot.replace(new RegExp('/', 'g'), ':');
}
exports.getProjectPathFromProjectRoot = getProjectPathFromProjectRoot;
function getProjectRootFromProjectPath(projectPath) {
    if (projectPath.startsWith(':')) {
        throw new Error(`Path ${projectPath} should not starts with two dots (:)`);
    }
    return projectPath.replace(/:/g, '/');
}
exports.getProjectRootFromProjectPath = getProjectRootFromProjectPath;
function getQuarkusVersion(gradlePropertiesContent) {
    const regexp = /quarkusVersion=(.*)/g;
    const matches = (gradlePropertiesContent.match(regexp) || []).map((e) => e.replace(regexp, '$1'));
    return matches[0];
}
exports.getQuarkusVersion = getQuarkusVersion;
function readKtlintVersion(gradlePropertiesContent) {
    const regexp = /ktlintVersion=(.*)/g;
    const matches = (gradlePropertiesContent.match(regexp) || []).map((e) => e.replace(regexp, '$1'));
    return matches[0];
}
function getKtlintVersion(dir) {
    const gradlePropertiesPath = path.join(dir, 'gradle.properties');
    let version = undefined;
    if (fs.existsSync(gradlePropertiesPath)) {
        const gradlePropertiesContent = fs.readFileSync(gradlePropertiesPath, 'utf-8');
        version = readKtlintVersion(gradlePropertiesContent);
    }
    return version === undefined ? common_1.ktlintVersion : version;
}
exports.getKtlintVersion = getKtlintVersion;
function readCheckstyleVersion(gradlePropertiesContent) {
    const regexp = /checkstyleVersion=(.*)/g;
    const matches = (gradlePropertiesContent.match(regexp) || []).map((e) => e.replace(regexp, '$1'));
    return matches[0];
}
function getCheckstyleVersion(dir) {
    const gradlePropertiesPath = path.join(dir, 'gradle.properties');
    let version = undefined;
    if (fs.existsSync(gradlePropertiesPath)) {
        const gradlePropertiesContent = fs.readFileSync(gradlePropertiesPath, 'utf-8');
        version = readCheckstyleVersion(gradlePropertiesContent);
    }
    return version === undefined ? common_1.checkstyleVersion : version;
}
exports.getCheckstyleVersion = getCheckstyleVersion;
function getRootProjectName(settingsGradleContent) {
    const regexp = /rootProject.name\s*=\s*['"](.*)['"]/g;
    const matches = (settingsGradleContent.match(regexp) || []).map((e) => e.replace(regexp, '$1'));
    return matches[0];
}
exports.getRootProjectName = getRootProjectName;
//# sourceMappingURL=index.js.map