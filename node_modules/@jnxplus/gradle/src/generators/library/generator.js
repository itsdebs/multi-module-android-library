"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const common_1 = require("@jnxplus/common");
const devkit_1 = require("@nx/devkit");
const path_1 = require("path");
const _1 = require("../../.");
function normalizeOptions(tree, options) {
    const simpleProjectName = (0, devkit_1.names)((0, common_1.normalizeName)(options.name)).fileName;
    let projectName;
    if (options.simpleName) {
        projectName = simpleProjectName;
    }
    else {
        projectName = options.directory
            ? `${(0, common_1.normalizeName)((0, devkit_1.names)(options.directory).fileName)}-${simpleProjectName}`
            : simpleProjectName;
    }
    const projectDirectory = options.directory
        ? `${(0, devkit_1.names)(options.directory).fileName}/${simpleProjectName}`
        : simpleProjectName;
    const projectRoot = `${(0, devkit_1.getWorkspaceLayout)(tree).libsDir}/${projectDirectory}`;
    const parsedTags = options.tags
        ? options.tags.split(',').map((s) => s.trim())
        : [];
    let packageName;
    if (options.simplePackageName) {
        packageName = `${options.groupId}.${(0, devkit_1.names)(simpleProjectName).className.toLocaleLowerCase()}`.replace(new RegExp(/-/, 'g'), '');
    }
    else {
        packageName = `${options.groupId}.${options.directory
            ? `${(0, devkit_1.names)(options.directory).fileName.replace(new RegExp(/\//, 'g'), '.')}.${(0, devkit_1.names)(simpleProjectName).className.toLocaleLowerCase()}`
            : (0, devkit_1.names)(simpleProjectName).className.toLocaleLowerCase()}`.replace(new RegExp(/-/, 'g'), '');
    }
    const packageDirectory = packageName.replace(new RegExp(/\./, 'g'), '/');
    const parsedProjects = options.projects
        ? options.projects.split(',').map((s) => s.trim())
        : [];
    const linter = options.language === 'java' ? 'checkstyle' : 'ktlint';
    const dsl = (0, _1.getDsl)(tree);
    const kotlinExtension = dsl === 'kotlin' ? '.kts' : '';
    return Object.assign(Object.assign({}, options), { projectName,
        projectRoot,
        projectDirectory,
        parsedTags,
        packageName,
        packageDirectory,
        parsedProjects,
        linter,
        dsl,
        kotlinExtension });
}
function addFiles(d, plugin, tree, options) {
    if (plugin === '@jnxplus/nx-boot-gradle' ||
        options.framework === 'spring-boot') {
        addBootFiles(d, tree, options);
    }
    if (plugin === '@jnxplus/nx-quarkus-gradle' ||
        options.framework === 'quarkus') {
        addQuarkusFiles(d, tree, options);
    }
    if (plugin === '@jnxplus/nx-micronaut-gradle' ||
        options.framework === 'micronaut') {
        addMicronautFiles(d, tree, options);
    }
    if (options.framework === 'none') {
        addNoneFiles(d, tree, options);
    }
}
function addNoneFiles(d, tree, options) {
    const templateOptions = Object.assign(Object.assign(Object.assign({}, options), (0, devkit_1.names)(options.name)), { offsetFromRoot: (0, devkit_1.offsetFromRoot)(options.projectRoot), template: '' });
    (0, devkit_1.generateFiles)(tree, (0, path_1.join)(d, 'files', 'none', options.language), options.projectRoot, templateOptions);
    if (options.skipStarterCode) {
        const fileExtension = options.language === 'java' ? 'java' : 'kt';
        tree.delete((0, devkit_1.joinPathFragments)(options.projectRoot, `/src/main/${options.language}/${options.packageDirectory}/Library.${fileExtension}`));
        tree.delete((0, devkit_1.joinPathFragments)(options.projectRoot, `/src/test/${options.language}/${options.packageDirectory}/LibraryTest.${fileExtension}`));
    }
}
function addBootFiles(d, tree, options) {
    const templateOptions = Object.assign(Object.assign(Object.assign({}, options), (0, devkit_1.names)(options.name)), { offsetFromRoot: (0, devkit_1.offsetFromRoot)(options.projectRoot), template: '' });
    (0, devkit_1.generateFiles)(tree, (0, path_1.join)(d, 'files', 'boot', options.language), options.projectRoot, templateOptions);
    if (options.skipStarterCode) {
        const fileExtension = options.language === 'java' ? 'java' : 'kt';
        tree.delete((0, devkit_1.joinPathFragments)(options.projectRoot, `/src/main/${options.language}/${options.packageDirectory}/HelloService.${fileExtension}`));
        tree.delete((0, devkit_1.joinPathFragments)(options.projectRoot, `/src/test/${options.language}/${options.packageDirectory}/HelloServiceTests.${fileExtension}`));
        tree.delete((0, devkit_1.joinPathFragments)(options.projectRoot, `/src/test/${options.language}/${options.packageDirectory}/TestConfiguration.${fileExtension}`));
        if (options.language === 'kotlin') {
            tree.delete((0, devkit_1.joinPathFragments)(options.projectRoot, `/src/test/resources/junit-platform.properties`));
        }
    }
}
function addQuarkusFiles(d, tree, options) {
    const templateOptions = Object.assign(Object.assign(Object.assign({}, options), (0, devkit_1.names)(options.name)), { offsetFromRoot: (0, devkit_1.offsetFromRoot)(options.projectRoot), template: '' });
    (0, devkit_1.generateFiles)(tree, (0, path_1.join)(d, 'files', 'quarkus', options.language), options.projectRoot, templateOptions);
    if (options.skipStarterCode) {
        const fileExtension = options.language === 'java' ? 'java' : 'kt';
        tree.delete((0, devkit_1.joinPathFragments)(options.projectRoot, `/src/main/${options.language}/${options.packageDirectory}/GreetingService.${fileExtension}`));
        tree.delete((0, devkit_1.joinPathFragments)(options.projectRoot, `/src/test/${options.language}/${options.packageDirectory}/GreetingServiceTest.${fileExtension}`));
    }
    else {
        tree.delete((0, devkit_1.joinPathFragments)(options.projectRoot, `/src/main/${options.language}/.gitkeep`));
        tree.delete((0, devkit_1.joinPathFragments)(options.projectRoot, `/src/test/${options.language}/.gitkeep`));
    }
}
function addMicronautFiles(d, tree, options) {
    const templateOptions = Object.assign(Object.assign(Object.assign({}, options), (0, devkit_1.names)(options.name)), { offsetFromRoot: (0, devkit_1.offsetFromRoot)(options.projectRoot), template: '' });
    (0, devkit_1.generateFiles)(tree, (0, path_1.join)(d, 'files', 'micronaut', options.language), options.projectRoot, templateOptions);
    if (options.skipStarterCode) {
        const fileExtension = options.language === 'java' ? 'java' : 'kt';
        tree.delete((0, devkit_1.joinPathFragments)(options.projectRoot, `/src/main/${options.language}/${options.packageDirectory}/HelloService.${fileExtension}`));
        tree.delete((0, devkit_1.joinPathFragments)(options.projectRoot, `/src/test/${options.language}/${options.packageDirectory}/HelloServiceTest.${fileExtension}`));
    }
    else {
        tree.delete((0, devkit_1.joinPathFragments)(options.projectRoot, `/src/main/${options.language}/.gitkeep`));
        tree.delete((0, devkit_1.joinPathFragments)(options.projectRoot, `/src/test/${options.language}/.gitkeep`));
    }
}
function default_1(d, plugin, tree, options) {
    var _a;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const normalizedOptions = normalizeOptions(tree, options);
        const projectConfiguration = {
            root: normalizedOptions.projectRoot,
            projectType: 'library',
            sourceRoot: `${normalizedOptions.projectRoot}/src`,
            targets: {
                build: {
                    executor: `${plugin}:build`,
                    outputs: [`${normalizedOptions.projectRoot}/build`],
                },
                lint: {
                    executor: `${plugin}:lint`,
                    options: {
                        linter: `${normalizedOptions.linter}`,
                    },
                },
                test: {
                    executor: `${plugin}:test`,
                },
            },
            tags: normalizedOptions.parsedTags,
        };
        const targets = (_a = projectConfiguration.targets) !== null && _a !== void 0 ? _a : {};
        //this is important because in case of spring boot we use jar task to build libraries
        if (options.framework && options.framework !== 'none') {
            targets['build'].options = Object.assign(Object.assign({}, targets['build'].options), { framework: options.framework });
        }
        if (options.language === 'kotlin') {
            targets['ktformat'] = {
                executor: `${plugin}:ktformat`,
            };
        }
        (0, devkit_1.addProjectConfiguration)(tree, normalizedOptions.projectName, projectConfiguration);
        addFiles(d, plugin, tree, normalizedOptions);
        (0, _1.addProjectToGradleSetting)(tree, normalizedOptions);
        (0, _1.addLibraryToProjects)(tree, normalizedOptions);
        yield (0, devkit_1.formatFiles)(tree);
    });
}
exports.default = default_1;
//# sourceMappingURL=generator.js.map